Setup of TLM AT Model

#include <systemc.h>
#include <tlm.h>
#include <tlm_utils/simple_target_socket.h>
#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/multi_passthrough_target_socket.h>
#include <tlm_utils/multi_passthrough_initiator_socket.h>
#include <tlm_utils/tlm_quantumkeeper.h>
#include <iostream>
#include <cstring>
#include <vector>

// Payload Extension for Routing
struct RoutingExtension : public tlm::tlm_extension<RoutingExtension> {
    int destination;

    virtual tlm_extension_base* clone() const {
        RoutingExtension* ext = new RoutingExtension;
        ext->destination = this->destination;
        return ext;
    }
    
    virtual void copy_from(tlm_extension_base const &ext) {
        destination = static_cast<RoutingExtension const &>(ext).destination;
    }
};

// TLM Memory Target Module with Input Buffer and Backpressure
SC_MODULE(memory) {
    tlm_utils::simple_target_socket<memory> socket;
    unsigned char mem[512];
    std::vector<tlm::tlm_generic_payload*> buffer;
    unsigned int buffer_size;

    SC_CTOR(memory) : socket("socket"), buffer_size(8) {
        socket.register_b_transport(this, &memory::b_transport);
    }

    void b_transport(tlm::tlm_generic_payload &trans, sc_time &delay) {
        if (buffer.size() >= buffer_size) {
            wait(10, SC_NS); // Backpressure simulation
        }

        buffer.push_back(&trans);
        tlm::tlm_command cmd = trans.get_command();
        uint64 addr = trans.get_address();
        unsigned char *data_ptr = trans.get_data_ptr();
        unsigned int len = trans.get_data_length();

        if (addr >= 512) {
            SC_REPORT_FATAL("memory", "Address out of range");
        }

        if (cmd == tlm::TLM_READ_COMMAND) {
            memcpy(data_ptr, &mem[addr], len);
        } else if (cmd == tlm::TLM_WRITE_COMMAND) {
            memcpy(&mem[addr], data_ptr, len);
        }

        delay += sc_time(20, SC_NS);
        trans.set_response_status(tlm::TLM_OK_RESPONSE);
    }
};

// TLM Bus with Multipassthrough Sockets and Payload Extension
SC_MODULE(bus) {
    tlm_utils::multi_passthrough_target_socket<bus> target_socket;
    tlm_utils::multi_passthrough_initiator_socket<bus> initiator_socket;

    SC_CTOR(bus) {
        target_socket.register_b_transport(this, &bus::b_transport);
    }

    void b_transport(int id, tlm::tlm_generic_payload &trans, sc_time &delay) {
        RoutingExtension* ext;
        trans.get_extension(ext);
        
        if (ext == nullptr) {
            ext = new RoutingExtension;
            trans.set_extension(ext);
        }
        
        uint64 addr = trans.get_address();
        if (addr < 512) {
            ext->destination = 0;
        } else {
            ext->destination = 1;
            trans.set_address(addr - 512);
        }
        initiator_socket[ext->destination]->b_transport(trans, delay);
    }
};

int sc_main(int argc, char* argv[]) {
    processor cpu0("cpu0");
    bus bus0("bus0");
    memory memory0("memory0");
    memory memory1("memory1");
    
    cpu0.socket.bind(bus0.target_socket);
    bus0.initiator_socket.bind(memory0.socket);
    bus0.initiator_socket.bind(memory1.socket);
    
    sc_start();
    return 0;
}

wall clock 

#include <systemc.h>
#include <tlm.h>
#include <tlm_utils/simple_target_socket.h>
#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/multi_passthrough_target_socket.h>
#include <tlm_utils/multi_passthrough_initiator_socket.h>
#include <tlm_utils/tlm_quantumkeeper.h>
#include <iostream>
#include <cstring>
#include <vector>

// Payload Extension for Routing
struct RoutingExtension : public tlm::tlm_extension<RoutingExtension> {
    int destination;

    virtual tlm_extension_base* clone() const {
        RoutingExtension* ext = new RoutingExtension;
        ext->destination = this->destination;
        return ext;
    }
    
    virtual void copy_from(tlm_extension_base const &ext) {
        destination = static_cast<RoutingExtension const &>(ext).destination;
    }
};

// TLM Memory Target Module with Input Buffer and Backpressure
SC_MODULE(memory) {
    tlm_utils::simple_target_socket<memory> socket;
    unsigned char mem[512];
    std::vector<tlm::tlm_generic_payload*> buffer;
    unsigned int buffer_size;

    SC_CTOR(memory) : socket("socket"), buffer_size(6) { // Updated buffer size to 6
        socket.register_b_transport(this, &memory::b_transport);
    }

    void b_transport(tlm::tlm_generic_payload &trans, sc_time &delay) {
        if (buffer.size() >= buffer_size) {
            wait(10, SC_NS); // Backpressure simulation
        }

        buffer.push_back(&trans);
        tlm::tlm_command cmd = trans.get_command();
        uint64 addr = trans.get_address();
        unsigned char *data_ptr = trans.get_data_ptr();
        unsigned int len = trans.get_data_length();

        if (addr >= 512) {
            SC_REPORT_FATAL("memory", "Address out of range");
        }

        if (cmd == tlm::TLM_READ_COMMAND) {
            memcpy(data_ptr, &mem[addr], len);
        } else if (cmd == tlm::TLM_WRITE_COMMAND) {
            memcpy(&mem[addr], data_ptr, len);
        }

        delay += sc_time(20, SC_NS);
        trans.set_response_status(tlm::TLM_OK_RESPONSE);
    }
};

// TLM Bus with Multipassthrough Sockets and Payload Extension
SC_MODULE(bus) {
    tlm_utils::multi_passthrough_target_socket<bus> target_socket;
    tlm_utils::multi_passthrough_initiator_socket<bus> initiator_socket;

    SC_CTOR(bus) {
        target_socket.register_b_transport(this, &bus::b_transport);
    }

    void b_transport(int id, tlm::tlm_generic_payload &trans, sc_time &delay) {
        RoutingExtension* ext;
        trans.get_extension(ext);
        
        if (ext == nullptr) {
            ext = new RoutingExtension;
            trans.set_extension(ext);
        }
        
        uint64 addr = trans.get_address();
        if (addr < 512) {
            ext->destination = 0;
        } else {
            ext->destination = 1;
            trans.set_address(addr - 512);
        }
        initiator_socket[ext->destination]->b_transport(trans, delay);
    }
};

int sc_main(int argc, char* argv[]) {
    processor cpu0("cpu0");
    bus bus0("bus0");
    memory memory0("memory0", 6); // Updated buffer size to 6
    memory memory1("memory1", 6); // Updated buffer size to 6
    
    cpu0.socket.bind(bus0.target_socket);
    bus0.initiator_socket.bind(memory0.socket);
    bus0.initiator_socket.bind(memory1.socket);
    
    // Measure wall-clock time before simulation
    clock_t start_time = clock();
    sc_start();
    clock_t end_time = clock();
    
    double execution_time = double(end_time - start_time) / CLOCKS_PER_SEC;
    std::cout << "Simulation execution time: " << execution_time << " seconds" << std::endl;
    
    return 0;
}
