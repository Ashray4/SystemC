https://github.com/TUK-SCVP -> github repo for scvp

Code from AAkarsh
[7/25/2024, 19:32] Muhammad Bilal: SC_MODULE(FIR)
{
    sc_in<bool> in;
    sc_signal<bool> r1;
    sc_signal<bool> r2;
    sc_signal<bool> r3;
    sc_out<bool> out;
    sc_clk<bool> Clk;
    sc_in<bool> reset

    SC_CTOR(nand) : A("A"), B("B"), Z("Z")
    {
        SC_METHOD(conbinational);
        sensitive << r1 << r2 << r3;
        SC_METHOD(sequential);
        sensitive << Clk.pos();;
    }

    void do_nand()
    {
        r3 = r2;
        r2 = r1;
        r1 = in;
    }
    void do_nand()
    {
        if(reset == 1)
        {
            r1, r2, r3 = 0;
        }
        else
        {
            out = (in + r1 + r2 + r3)/4;
        }
    }
};
[7/25/2024, 19:32] Muhammad Bilal: #ifndef GATE_H
#define GATE_H

#include <systemc.h>

SC_MODULE(gate)
{
    // Inputs and Outputs for the gates
    sc_in<bool> A;
    sc_in<bool> B;
    sc_out<bool> F; // Output of the AND gate, input to the OR gate
    sc_out<bool> C; // Output of the OR gate, input to the AND gate

    // Internal signals for intermediate results
    sc_signal<bool> and_result;
    sc_signal<bool> or_result;

    // Constructor
    SC_CTOR(gate) : A("A"), B("B"), F("F"), C("C")
    {
        // Define AND gate behavior
        SC_METHOD(do_and);
        sensitive << A << B;

        // Define OR gate behavior
        SC_METHOD(do_or);
        sensitive << and_result;
    }

    // AND gate behavior
    void do_and()
    {
        and_result.write(A.read() && B.read());
        C.write(and_result.read()); // Output of the AND gate feeds into the OR gate
    }

    // OR gate behavior
    void do_or()
    {
        or_result.write(A.read() || B.read());
        F.write(or_result.read()); // Output of the OR gate feeds into the AND gate
    }
};

#endif

#ifndef GATE_H
#define GATE_H

#include <systemc.h>

SC_MODULE(gate)
{
    // Inputs and Outputs for the gates
    sc_in<bool> A;
    sc_in<bool> B;
    sc_out<bool> F; // Output of the AND gate, input to the OR gate
    sc_out<bool> C; // Output of the OR gate, input to the AND gate

    // Internal signals for intermediate results
    sc_signal<bool> and_result;
    sc_signal<bool> or_result;

    // Constructor
    SC_CTOR(gate) : A("A"), B("B"), F("F"), C("C")
    {
        // Define AND gate behavior
        SC_METHOD(do_and);
        sensitive << A << B;

        // Define OR gate behavior
        SC_METHOD(do_or);
        sensitive << and_result;
    }

    // AND gate behavior
    void do_and()
    {
        and_result.write(A.read() && B.read());
        C.write(and_result.read()); // Output of the AND gate feeds into the OR gate
    }

    // OR gate behavior
    void do_or()
    {
        or_result.write(A.read() || B.read());
        F.write(or_result.read()); // Output of the OR gate feeds into the AND gate
    }
};

#endif
codes from omkar
rslatch
#pragma once
#include <systemc.h>

SC_MODULE(RSLatch)
{
    sc_in<bool> A;
    sc_in<bool> B;
    sc_out<bool> D;

    sc_signal<bool> C; // Auxiliary signal

    SC_CTOR(RSLatch) : A("A"), B("B"), D("D"), C("C")
    {
        SC_METHOD(process);
        //sensitive << A << B;
        sensitive << A << B << C <<D;
    }

    void process()
    {
        D.write(!B.read() && C.read()); // Nor Gate
        C.write((A.read() || D.read())); // Nor Gate
    }
};
fifo
using namespace std;

// Interface class for the FIFO
#include <systemc.h>
#include <queue>

using namespace std;

// ŸçSpecifying the read and write methods.
class SimpleFIFOInterface : public sc_interface {
public:
    virtual unsigned int read() = 0;
    virtual void write(unsigned int val) = 0;
};

// Implementation of the FIFO
class SimpleFifo : public SimpleFIFOInterface {
private:
    std::queue<unsigned int> fifo; // Queue to hold the FIFO data
    sc_event writtenEvent; // Event to notify of a write operation
    sc_event readEvent; // Event to notify of a read operation
    unsigned int maxSize; // Maximum size of the FIFO

public:
    // Constructor to initialize the FIFO with a maximum size
    SimpleFifo(unsigned int size = 16) : maxSize(size) {}

    // Blocking read method
    unsigned int read() override {
        while(fifo.empty()) {
            wait(writtenEvent);
        }
        unsigned int val = fifo.front();
        fifo.pop();
        readEvent.notify(SC_ZERO_TIME); // Notify a read operation
        return val;
    }

    // Blocking write method
    void write(unsigned int val) override {
        while(fifo.size() == maxSize) {
            wait(readEvent);
        }
        fifo.push(val);
        writtenEvent.notify(SC_ZERO_TIME); // Notify a write operation
    }
};

// Producer module
SC_MODULE(Producer) {
    sc_port<SimpleFIFOInterface> out;

    SC_CTOR(Producer) {
        SC_THREAD(produce);
    }

    void produce() {
        unsigned int i = 0;
        while(true) {
            wait(1, SC_NS);
            out->write(i++);
            cout << "@" << sc_time_stamp() << " Producer wrote: " << i-1 << endl;
        }
    }
};

// Consumer module
SC_MODULE(Consumer) {
    sc_port<SimpleFIFOInterface> in;

    SC_CTOR(Consumer) {
        SC_THREAD(consume);
    }

    void consume() {
        while(true) {
            wait(4, SC_NS);
            unsigned int data = in->read();
            cout << "@" << sc_time_stamp() << " Consumer read: " << data << endl;
        }
    }
};

// Main function to tie everything together
int sc_main(int argc, char* argv[]) {
    Producer producer("Producer");
    Consumer consumer("Consumer");
    SimpleFifo fifo(4); // Instantiate FIFO with a depth of 4

    // Bind ports
    producer.out(fifo);
    consumer.in(fifo);

    // Start the simulation
    sc_start(100, SC_NS);
    return 0;
}
TLM
#include <systemc.h>
#include <tlm.h>
#include <tlm_utils/multi_passthrough_target_socket.h>
#include <tlm_utils/multi_passthrough_initiator_socket.h>
#include <cassert>

using namespace sc_core;
using namespace std;

// Define the Interconnect module
class Interconnect : public sc_module {
public:
    // Target socket for incoming transactions
    tlm_utils::multi_passthrough_target_socket<Interconnect> tSocket;
    // Initiator socket for outgoing transactions
    tlm_utils::multi_passthrough_initiator_socket<Interconnect> iSocket;

    // Constructor with memory size and routing delay parameters
    SC_HAS_PROCESS(Interconnect);
    Interconnect(sc_module_name name, uint64_t memSize, sc_time routingDelay)
        : sc_module(name), _memSize(memSize), _routingDelay(routingDelay) {
        // Register callback for the b_transport interface
        tSocket.register_b_transport(this, &Interconnect::b_transport);
    }

protected:
    uint64_t _memSize; // Size of each memory
    sc_time _routingDelay; // Routing delay

    // TLM-2 blocking transport method
    void b_transport(int id, tlm::tlm_generic_payload& trans, sc_time& delay) {
        tlm::tlm_command cmd = trans.get_command();
        sc_dt::uint64 addr = trans.get_address();
        
        // Adjust the address based on memory size
        uint64_t targetId = addr / _memSize;
        assert(targetId < iSocket.size()); // Ensure the target exists

        // Adjust the address for the target memory
        addr = addr % _memSize;
        trans.set_address(addr);

        // Add the routing delay
        delay += _routingDelay;

        // Forward the transaction to the target memory
        iSocket[targetId]->b_transport(trans, delay);
    }
};

// Main function (for example/testing purposes)
int sc_main(int argc, char* argv[]) {
    // Instantiate components and set up the simulation
    // Note: The instantiation of memories and connection to the interconnect's iSocket must be done here.
    
    return 0;
}
